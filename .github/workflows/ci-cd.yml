name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: iris-mlops-pipeline
  DOCKER_REGISTRY: docker.io

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black isort
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check src/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only src/
        
    - name: Load and preprocess data
      run: |
        python src/data/load_data.py
        
    - name: Train models
      run: |
        python src/models/train.py
        
    - name: Test API imports
      run: |
        python -c "from src.api.main import app; print('API imports successful')"

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=git-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Update deployment script
      run: |
        echo "#!/bin/bash" > deploy.sh
        echo "set -e" >> deploy.sh
        echo "" >> deploy.sh
        echo "# Stop and remove existing container" >> deploy.sh
        echo "docker stop iris-api || true" >> deploy.sh
        echo "docker rm iris-api || true" >> deploy.sh
        echo "" >> deploy.sh
        echo "# Pull latest image" >> deploy.sh
        echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest" >> deploy.sh
        echo "" >> deploy.sh
        echo "# Run new container" >> deploy.sh
        echo "docker run -d \\" >> deploy.sh
        echo "  --name iris-api \\" >> deploy.sh
        echo "  -p 8000:8000 \\" >> deploy.sh
        echo "  --restart unless-stopped \\" >> deploy.sh
        echo "  ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest" >> deploy.sh
        echo "" >> deploy.sh
        echo "echo \"‚úÖ Deployment completed successfully!\"" >> deploy.sh
        echo "echo \"API available at: http://localhost:8000\"" >> deploy.sh
        echo "echo \"Health check: http://localhost:8000/health\"" >> deploy.sh
        echo "echo \"API docs: http://localhost:8000/docs\"" >> deploy.sh
        chmod +x deploy.sh
        
    - name: Upload deployment script
      uses: actions/upload-artifact@v3
      with:
        name: deployment-script
        path: deploy.sh

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        # In a real environment, this would deploy to a staging server
        # For demo purposes, we'll just echo the deployment commands
        echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "docker run -d --name iris-api-staging -p 8001:8000 ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "‚úÖ Staging deployment completed!"
        
    - name: Run health checks
      run: |
        echo "üîç Running health checks on staging..."
        # In a real environment, these would be actual health checks
        echo "curl http://staging-server:8001/health"
        echo "curl http://staging-server:8001/metrics"
        echo "‚úÖ Health checks passed!"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        # In a real environment, this would deploy to production servers
        echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "docker run -d --name iris-api-prod -p 8000:8000 ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "‚úÖ Production deployment completed!"
        
    - name: Notify deployment
      run: |
        echo "üì¢ Deployment notification:"
        echo "‚úÖ Iris Classification API has been successfully deployed to production"
        echo "üåê Production URL: http://production-server:8000"
        echo "üìö API Documentation: http://production-server:8000/docs"
        echo "üíä Health Check: http://production-server:8000/health"
